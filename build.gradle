buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.4.0-1.12.2"
group= "engineers.workshop"
archivesBaseName = "EngineersWorkshop"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.1.2566"
    runDir = "run"
    mappings = "snapshot_20171003"
}

dependencies {}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import java.nio.file.Files

def createItemJSON() {
    File modelDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/models")
    File itemModelDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/models/item")
    if(!modelDirectory.exists()) modelDirectory.mkdir()
    if(!itemModelDirectory.exists()) itemModelDirectory.mkdir()

    File textureDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/textures/items")

    createJSONsForTextures(textureDirectory, "")
}

def createJSONsForTextures(File directory, String directoryPath) {
    for(File file: directory.listFiles()) {
        if(file.isDirectory()) {
            String newDirectoryPath = directoryPath;

            if(!newDirectoryPath.isEmpty()) {
                newDirectoryPath += "/"
            }
            newDirectoryPath += file.name

            String newDirectoryPathFileString = ".\\src\\main\\resources\\assets\\"+ archivesBaseName + "\\models\\item\\" + newDirectoryPath
            File newDirectoryPathFile = new File(newDirectoryPathFileString);
            if(!newDirectoryPathFile.exists()) {
                newDirectoryPathFile.mkdir();
            }

            createJSONsForTextures(file, newDirectoryPath)
        } else {
            String fileName = file.name
			if(!fileName.startsWith("#")){
            String newFileName = ""
            for (Character aChar : fileName.toCharArray()) {
                if (Character.isUpperCase(aChar)) {
                    newFileName += "_" + aChar.toString().toLowerCase()
                } else {
                    newFileName += aChar
                }
            }

            if (newFileName.startsWith("item")) {
                newFileName = newFileName.replaceFirst("item", "")
            }
            if (newFileName.startsWith("_")) {
                newFileName = newFileName.replaceFirst("_", "")
            }

            Files.move(file.toPath(), file.toPath().resolveSibling(newFileName));

            newFileName = newFileName.replace(".png", "")
            newFileName = newFileName.replace(".mcmeta", "")

            if (!directoryPath.isEmpty() && !(directoryPath.endsWith("\\") || directoryPath.endsWith("/"))) {
                directoryPath += "\\";
            }
            String fileLocation = ".\\src\\main\\resources\\assets\\" +archivesBaseName+ "\\models\\item\\" + directoryPath +
                    newFileName.toString() + ".json"
            println(fileLocation)
            File jsonFile = new File(fileLocation);
            if (!jsonFile.exists()) {
                directoryPath = directoryPath.replace("\\", "/")
                jsonFile.createNewFile();
                String jsonString = '''{
    "parent":"item/generated",
    "textures":{
        "layer0":"''' + archivesBaseName + ":items/" + directoryPath + newFileName + '''"
    },
    "display": {
        "thirdperson": {
            "rotation": [ -90, 0, 0 ],
            "translation": [ 0, 1, -3 ],
            "scale": [ 0.55, 0.55, 0.55 ]
        },
        "firstperson": {
            "rotation": [ 0, -135, 25 ],
            "translation": [ 0, 4, 2 ],
            "scale": [ 1.7, 1.7, 1.7 ]
        }
    }
}
'''
                jsonFile << jsonString
            }
        }
    }
	}
}


//task updateMajor << {
	//update([1,0,0]);
//}
//task updateMinor << {
//	update([0,1,0]);
//}
//task updatePatch << {
//	update([0,0,1]);
//}


task makeJSONItems << {
	createItemJSON();
	print 'Finished making JSON for existing item textures';
}

//def update(int[] newVersion) {
//	int major = version.split("-")[0].split("\\.")[0].toInteger() + newVersion[0];
//	int minor = version.split("-")[0].split("\\.")[1].toInteger() + newVersion[1];
//	int patch = version.split("-")[0].split("\\.")[2].toInteger() + newVersion[2];
//    println(sprintf("Updating from %s to %s.%s.%s-%s", version, major, minor, patch, project.minecraft.version))
//}
